{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","props","count","setCount","disabled","setDisabled","onAdd","movieTitle","setMovieTitle","movieDescription","setMovieDescription","movieImageUrl","setMovieImageUrl","movieImdbUrl","setMovieImdbUrl","movieImdbId","setMovieImdbId","imageUrl","setMovie","useEffect","length","onClick","e","preventDefault","prevCount","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80fb3a59.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\n\nexport const NewMovie = (props: any) => {\n  const [count, setCount] = useState(0);\n  const [disabled, setDisabled] = useState(true);\n  const { onAdd } = props;\n  const [movieTitle, setMovieTitle] = useState('');\n  const [movieDescription, setMovieDescription] = useState('');\n  const [movieImageUrl, setMovieImageUrl] = useState('');\n  const [movieImdbUrl, setMovieImdbUrl] = useState('');\n  const [movieImdbId, setMovieImdbId] = useState('');\n\n  const [movie, setMovie] = useState({\n    title: movieTitle,\n    description: movieDescription,\n    imageUrl: movieImageUrl,\n    imdbUrl: movieImdbUrl,\n    imdbId: movieImdbId,\n  });\n\n  useEffect(() => {\n    setMovie(\n      {\n        title: movieTitle,\n        description: movieDescription,\n        imageUrl: movieImageUrl,\n        imdbUrl: movieImdbUrl,\n        imdbId: movieImdbId,\n      },\n\n    );\n    if (movie.title.length !== 0\n      && movie.imageUrl.length !== 0\n      && movie.imdbUrl.length !== 0\n      && movie.imdbId.length !== 0\n    ) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [\n    movieTitle,\n    movieDescription,\n    movieImageUrl,\n    movieImdbUrl,\n    movieImdbId,\n    disabled,\n  ]);\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieTitle}\n        onChange={setMovieTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movieDescription}\n        onChange={setMovieDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movieImageUrl}\n        onChange={setMovieImageUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movieImdbUrl}\n        onChange={(event) => {\n          setMovieImdbUrl(event);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movieImdbId}\n        onChange={(event) => {\n          setMovieImdbId(event);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={disabled}\n            onClick={(e) => {\n              e.preventDefault();\n\n              onAdd(movie);\n              setCount((prevCount) => prevCount + 1);\n              setMovieTitle('');\n              setMovieDescription('');\n              setMovieImageUrl('');\n              setMovieImdbUrl('');\n              setMovieImdbId('');\n              setDisabled(true);\n            }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: any) => {\n    setMovies(\n      [...movies,\n        movie,\n      ],\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}